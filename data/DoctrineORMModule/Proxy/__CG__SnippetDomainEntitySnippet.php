<?php

namespace DoctrineORMModule\Proxy\__CG__\SnippetDomain\Entity;

/**
 * DO NOT EDIT THIS FILE - IT WAS CREATED BY DOCTRINE'S PROXY GENERATOR
 */
class Snippet extends \SnippetDomain\Entity\Snippet implements \Doctrine\ORM\Proxy\Proxy
{
    /**
     * @var \Closure the callback responsible for loading properties in the proxy object. This callback is called with
     *      three parameters, being respectively the proxy object to be initialized, the method that triggered the
     *      initialization process and an array of ordered parameters that were passed to that method.
     *
     * @see \Doctrine\Common\Persistence\Proxy::__setInitializer
     */
    public $__initializer__;

    /**
     * @var \Closure the callback responsible of loading properties that need to be copied in the cloned object
     *
     * @see \Doctrine\Common\Persistence\Proxy::__setCloner
     */
    public $__cloner__;

    /**
     * @var boolean flag indicating if this object was already initialized
     *
     * @see \Doctrine\Common\Persistence\Proxy::__isInitialized
     */
    public $__isInitialized__ = false;

    /**
     * @var array properties to be lazy loaded, with keys being the property
     *            names and values being their default values
     *
     * @see \Doctrine\Common\Persistence\Proxy::__getLazyProperties
     */
    public static $lazyPropertiesDefaults = array();



    /**
     * @param \Closure $initializer
     * @param \Closure $cloner
     */
    public function __construct($initializer = null, $cloner = null)
    {

        $this->__initializer__ = $initializer;
        $this->__cloner__      = $cloner;
    }







    /**
     * 
     * @return array
     */
    public function __sleep()
    {
        if ($this->__isInitialized__) {
            return array('__isInitialized__', '' . "\0" . 'SnippetDomain\\Entity\\Snippet' . "\0" . 'id', '' . "\0" . 'SnippetDomain\\Entity\\Snippet' . "\0" . 'slug', '' . "\0" . 'SnippetDomain\\Entity\\Snippet' . "\0" . 'title', '' . "\0" . 'SnippetDomain\\Entity\\Snippet' . "\0" . 'description', '' . "\0" . 'SnippetDomain\\Entity\\Snippet' . "\0" . 'code', '' . "\0" . 'SnippetDomain\\Entity\\Snippet' . "\0" . 'user', '' . "\0" . 'SnippetDomain\\Entity\\Snippet' . "\0" . 'userId', '' . "\0" . 'SnippetDomain\\Entity\\Snippet' . "\0" . 'tags', '' . "\0" . 'SnippetDomain\\Entity\\Snippet' . "\0" . 'categories', '' . "\0" . 'SnippetDomain\\Entity\\Snippet' . "\0" . 'likes', 'dtc', 'dtm');
        }

        return array('__isInitialized__', '' . "\0" . 'SnippetDomain\\Entity\\Snippet' . "\0" . 'id', '' . "\0" . 'SnippetDomain\\Entity\\Snippet' . "\0" . 'slug', '' . "\0" . 'SnippetDomain\\Entity\\Snippet' . "\0" . 'title', '' . "\0" . 'SnippetDomain\\Entity\\Snippet' . "\0" . 'description', '' . "\0" . 'SnippetDomain\\Entity\\Snippet' . "\0" . 'code', '' . "\0" . 'SnippetDomain\\Entity\\Snippet' . "\0" . 'user', '' . "\0" . 'SnippetDomain\\Entity\\Snippet' . "\0" . 'userId', '' . "\0" . 'SnippetDomain\\Entity\\Snippet' . "\0" . 'tags', '' . "\0" . 'SnippetDomain\\Entity\\Snippet' . "\0" . 'categories', '' . "\0" . 'SnippetDomain\\Entity\\Snippet' . "\0" . 'likes', 'dtc', 'dtm');
    }

    /**
     * 
     */
    public function __wakeup()
    {
        if ( ! $this->__isInitialized__) {
            $this->__initializer__ = function (Snippet $proxy) {
                $proxy->__setInitializer(null);
                $proxy->__setCloner(null);

                $existingProperties = get_object_vars($proxy);

                foreach ($proxy->__getLazyProperties() as $property => $defaultValue) {
                    if ( ! array_key_exists($property, $existingProperties)) {
                        $proxy->$property = $defaultValue;
                    }
                }
            };

        }
    }

    /**
     * 
     */
    public function __clone()
    {
        $this->__cloner__ && $this->__cloner__->__invoke($this, '__clone', array());
    }

    /**
     * Forces initialization of the proxy
     */
    public function __load()
    {
        $this->__initializer__ && $this->__initializer__->__invoke($this, '__load', array());
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __isInitialized()
    {
        return $this->__isInitialized__;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __setInitialized($initialized)
    {
        $this->__isInitialized__ = $initialized;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __setInitializer(\Closure $initializer = null)
    {
        $this->__initializer__ = $initializer;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __getInitializer()
    {
        return $this->__initializer__;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __setCloner(\Closure $cloner = null)
    {
        $this->__cloner__ = $cloner;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific cloning logic
     */
    public function __getCloner()
    {
        return $this->__cloner__;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     * @static
     */
    public function __getLazyProperties()
    {
        return self::$lazyPropertiesDefaults;
    }

    
    /**
     * {@inheritDoc}
     */
    public function preModified()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'preModified', array());

        return parent::preModified();
    }

    /**
     * {@inheritDoc}
     */
    public function prePersist()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'prePersist', array());

        return parent::prePersist();
    }

    /**
     * {@inheritDoc}
     */
    public function addTags(\Doctrine\Common\Collections\Collection $tags)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'addTags', array($tags));

        return parent::addTags($tags);
    }

    /**
     * {@inheritDoc}
     */
    public function addTag(\SnippetDomain\Entity\Tag $tag)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'addTag', array($tag));

        return parent::addTag($tag);
    }

    /**
     * {@inheritDoc}
     */
    public function removeTags(\Doctrine\Common\Collections\Collection $tags)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'removeTags', array($tags));

        return parent::removeTags($tags);
    }

    /**
     * {@inheritDoc}
     */
    public function addCategories(\Doctrine\Common\Collections\Collection $categories)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'addCategories', array($categories));

        return parent::addCategories($categories);
    }

    /**
     * {@inheritDoc}
     */
    public function addCategory(\SnippetDomain\Entity\Category $category)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'addCategory', array($category));

        return parent::addCategory($category);
    }

    /**
     * {@inheritDoc}
     */
    public function removeCategories(\Doctrine\Common\Collections\Collection $categories)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'removeCategories', array($categories));

        return parent::removeCategories($categories);
    }

    /**
     * {@inheritDoc}
     */
    public function getId()
    {
        if ($this->__isInitialized__ === false) {
            return (int)  parent::getId();
        }


        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getId', array());

        return parent::getId();
    }

    /**
     * {@inheritDoc}
     */
    public function getSlug()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getSlug', array());

        return parent::getSlug();
    }

    /**
     * {@inheritDoc}
     */
    public function getTitle()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getTitle', array());

        return parent::getTitle();
    }

    /**
     * {@inheritDoc}
     */
    public function getDescription()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getDescription', array());

        return parent::getDescription();
    }

    /**
     * {@inheritDoc}
     */
    public function getCode()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getCode', array());

        return parent::getCode();
    }

    /**
     * {@inheritDoc}
     */
    public function getUserId()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getUserId', array());

        return parent::getUserId();
    }

    /**
     * {@inheritDoc}
     */
    public function getTags()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getTags', array());

        return parent::getTags();
    }

    /**
     * {@inheritDoc}
     */
    public function getCategories()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getCategories', array());

        return parent::getCategories();
    }

    /**
     * {@inheritDoc}
     */
    public function setId($id)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setId', array($id));

        return parent::setId($id);
    }

    /**
     * {@inheritDoc}
     */
    public function setSlug($slug)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setSlug', array($slug));

        return parent::setSlug($slug);
    }

    /**
     * {@inheritDoc}
     */
    public function setTitle($title)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setTitle', array($title));

        return parent::setTitle($title);
    }

    /**
     * {@inheritDoc}
     */
    public function setDescription($description)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setDescription', array($description));

        return parent::setDescription($description);
    }

    /**
     * {@inheritDoc}
     */
    public function setCode($code)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setCode', array($code));

        return parent::setCode($code);
    }

    /**
     * {@inheritDoc}
     */
    public function getUser()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getUser', array());

        return parent::getUser();
    }

    /**
     * {@inheritDoc}
     */
    public function setUser($user)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setUser', array($user));

        return parent::setUser($user);
    }

    /**
     * {@inheritDoc}
     */
    public function getDtc()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getDtc', array());

        return parent::getDtc();
    }

    /**
     * {@inheritDoc}
     */
    public function getLikes()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getLikes', array());

        return parent::getLikes();
    }

    /**
     * {@inheritDoc}
     */
    public function setLikes(\Doctrine\Common\Collections\ArrayCollection $likes)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setLikes', array($likes));

        return parent::setLikes($likes);
    }

}
